
separator		%%
<Rat18S> → %% <Opt Declaration List> <Statement List>

keyword		int
<Opt Declaration List> → <Declaration List> | <Empty>
<Declaration List> → <Declaration> ; <Declaration List’>
<Declaration> → <Qualifier> <IDs>
<Qualifier> → int | boolean | real

identifier		i
<IDs> → <Identifier> <IDs’>

separator		,
<IDs’> → , <IDs> | e

identifier		max
<IDs> → <Identifier> <IDs’>

separator		,
<IDs’> → , <IDs> | e

identifier		sum
<IDs> → <Identifier> <IDs’>

separator		;
<IDs’> → , <IDs> | e
<Empty> → e

identifier		sum
<Declaration List’> → <Declaration List> | e
<Empty> → e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> → <Identifier> = <Expression> ;

operator		=

integer		0
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		;
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

identifier		i

identifier		i
<Statement List’> → <Statement List> | e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> → <Identifier> = <Expression> ;

operator		=

integer		1
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		;
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

keyword		get

keyword		get
<Statement List’> → <Statement List> | e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> → get(<IDs>);

separator		(

identifier		max
<IDs> → <Identifier> <IDs’>

separator		)
<IDs’> → , <IDs> | e
<Empty> → e

separator		;

keyword		while
<Statement List’> → <Statement List> | e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<While> → while (<Condition>) <Statement>

separator		(

identifier		i
<Condition> → <Expression> <Relop> <Expression>
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

operator		<
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e
<Relop> → == | ^= | > | < | => | =<

identifier		max
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		)
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

separator		{
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> → { <Statement List> }

identifier		sum
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> → <Identifier> = <Expression> ;

operator		=

identifier		sum
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

operator		+
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e

identifier		i
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		;
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

identifier		i

identifier		i
<Statement List’> → <Statement List> | e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> → <Identifier> = <Expression> ;

operator		=

identifier		i
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

operator		+
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e

integer		1
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		;
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

separator		}

separator		}
<Statement List’> → <Statement List> | e
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> → { <Statement List> }

keyword		put
<Statement List> → <Statement> <Statement List’>
<Statement> → <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Print> → put (<Expression>);

separator		(

identifier		sum
<Expression> → <Term> <Expression’>
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

operator		+
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e

identifier		max
<Term> → <Factor> <Term’>
<Factor> → - <Primary> | <Primary>
<Primary> → <Identifier> | <Integer> | <Identifier> (<IDs>) | (<Expression>) | <Real> | true | false

separator		)
<Term’> → * <Factor> <Term’> | / <Factor> <Term’> | e
<Empty> → e
<Expression’> → + <Term> <Expression’> | - <Term> <Expression’> | e
<Empty> → e

separator		;

NotToken		$
<Statement List’> → <Statement List> | e
<Empty> → e
<Statement List’> → <Statement List> | e
<Empty> → e
<Statement List’> → <Statement List> | e
<Empty> → e

Finished Parsing!

		Instr Table
Address   Op                  Oprnd     
1         PUSHM               2000      
2         PUSHM               2001      
3         PUSHM               2002      
4         PUSHM               2002      
5         PUSHI               0         
6         POPM                2002      
7         PUSHM               2000      
8         PUSHI               1         
9         POPM                2000      
10        STDIN                         
11        PUSHM               2001      
12        LABEL                         
13        PUSHM               2000      
14        PUSHM               2000      
15        LES                           
16        JUMPZ                         
17        PUSHM               '         
18        PUSHM               2001      
19        PUSHM               2002      
20        PUSHM               2002      
21        PUSHM               2002      
22        PUSHM               2000      
23        PUSHM               2000      
24        ADD                           
25        POPM                2002      
26        PUSHM               2000      
27        PUSHM               2000      
28        PUSHM               2000      
29        PUSHI               1         
30        ADD                           
31        POPM                2000      
32        STDOUT                        
33        PUSHM               2002      
34        PUSHM               2002      
35        PUSHM               2001      
36        PUSHM               2001      
37        ADD                           
38        JUMP                12        

		Symbol Table
ID        Type                MemLoc    
i         int                 2000      
max       int                 2001      
sum       int                 2002      
